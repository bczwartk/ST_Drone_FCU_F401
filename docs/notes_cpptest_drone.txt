Cloning the project
-------------------
git clone https://github.com/STMicroelectronics-CentralLabs/ST_Drone_FCU_F401.git
or my fork:
git clone https://github.com/bczwartk/ST_Drone_FCU_F401.git


Building the project
--------------------
* IAR EWARM 9.30.1
  * Open workspace in EWARM IDE: 
    ST_Drone_FCU_F401_cpptest\STM32 FW Project\Official release with BLE Remocon - 170318\EWARM\Project.eww
  * Rebuild All
* iarbuild
    cd ...\ST_Drone_FCU_F401_cpptest\STM32 FW Project\Official release with BLE Remocon - 170318\EWARM
    iarbuild ToyDrone.ewp -clean "ToyDrone Configuration" -log all
    iarbuild ToyDrone.ewp -make  "ToyDrone Configuration" -log all


Prepare IAR EWARM project for C/C++test
---------------------------------------
* In EWARM open the workspace Project.eww
* Create a new "cpptest" project configuration with full runtime library and simulator enabled



Build and create BDF
--------------------
* Prepare make_bdf.bat script to be run from the root of the project
  For IAR EWARM 9.30.1 the resulting BDF is stored under ...\EWARM\cpptest\...
* Include paths in the BDF need to be fixed as the trailing backslashes 
  added by iarbuild confuse C/C++test unit testing.  See update_bdf.py script.
* Run scripts\make_bdf.bat from the root of cloned project to create the final BDF at:
    ...\ST_Drone_FCU_F401_cpptest\STM32 FW Project\Official release with BLE Remocon - 170318\EWARM\cpptest\cpptestscan.bdf


Create C/C++test project and configuration
------------------------------------------ 
* Created project (ST_Drone_FCU_F401_Official_BLE_Remocon_170318)
* Updated Build Settings:
  * Selected use of BDF and updated path to be: ${project_loc}/EWARM/cpptest/cpptestscan.bdf
  * Selected proper compiler: iccarm_9_10 was the closest.
* Created test configuration based on the builtin one:
  * set project name and EWARM config in test config's parameters, 
  * updated flow to find .cspy.bat,
  * enabled reporting UT details,
  * enabled a few coverage metrics.
  

Run first unit tests
--------------------
* Create simple unit tests.
* Run unit tests, make sure results are correct.
* Looks good.  Some improvements to be implemented:
  * disable coverage on HAL, Drivers, CMSIS and Middleware code
  * do not instrument interrupts and other HAL code under Src/
* This was implemented by
  * adding resources to skip (.parasoft), and 
  * disabling coverage instrumentation in test config's instrumentation settings.
  * Header files needed special options in .parasoft. 
  * All this is also used by SCA to control scope of analysis.


Run unit tests and static analysis from command line
----------------------------------------------------
* Created scripts cpptest_run_sca.bat and cpptest_run_ut.bat.
* The scripts should be run from the top of cloned tree and can report to DTP if needed
  (by adding -publish at the scripts' command lines).
  Note: the scripts expect that BDF is already in place.
* Improvement: create a single script that implements full workflow: clone, build/BDF, SCA, UT+CC.


